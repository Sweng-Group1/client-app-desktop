package Projects;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.PathIterator;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;

import javax.swing.JPanel;

public class BufferedImagePaintTest extends JPanel{
	JPanel pane;
	boolean paintMode;
	boolean isClicked;
	Point click;
	
	public BufferedImagePaintTest(){
		this.setBackground(Color.white);
		this.setLayout(null);
		pane= new JPanel();
		this.add(pane);
		pane.setLayout(null);
		isClicked=false;
		addMouseListeners();
	}
	private void addMouseListeners() {
		pane.addMouseListener(new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent e) {
				click= e.getPoint();
				
			}

			@Override
			public void mousePressed(MouseEvent e) {
				click= e.getPoint();
				
			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
		});

		pane.addMouseMotionListener(new MouseMotionListener() {

			@Override
			public void mouseDragged(MouseEvent e) {
				if(click==null) {
					click= e.getPoint();
				}
				Graphics2D g2= (Graphics2D) pane.getGraphics();
				g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
				g2.setColor(Color.black);
				BasicStroke stroke = new BasicStroke(30);
				Ellipse2D shape = new Ellipse2D.Double();
				stroke.createStrokedShape(shape);
				
				stroke.createStrokedShape(new Shape() {

					@Override
					public Rectangle getBounds() {
						// TODO Auto-generated method stub
						return null;
					}

					@Override
					public Rectangle2D getBounds2D() {
						// TODO Auto-generated method stub
						return null;
					}

					@Override
					public boolean contains(double x, double y) {
						// TODO Auto-generated method stub
						return false;
					}

					@Override
					public boolean contains(Point2D p) {
						// TODO Auto-generated method stub
						return false;
					}

					@Override
					public boolean intersects(double x, double y, double w, double h) {
						// TODO Auto-generated method stub
						return false;
					}

					@Override
					public boolean intersects(Rectangle2D r) {
						// TODO Auto-generated method stub
						return false;
					}

					@Override
					public boolean contains(double x, double y, double w, double h) {
						// TODO Auto-generated method stub
						return false;
					}

					@Override
					public boolean contains(Rectangle2D r) {
						// TODO Auto-generated method stub
						return false;
					}

					@Override
					public PathIterator getPathIterator(AffineTransform at) {
						// TODO Auto-generated method stub
						return null;
					}

					@Override
					public PathIterator getPathIterator(AffineTransform at, double flatness) {
						// TODO Auto-generated method stub
						return null;
					}
					
				})
				
				g2.setStroke(stroke);
				
				g2.drawLine((int)click.getX(),(int)click.getY(), e.getX(), e.getY());
				click=e.getPoint();
						
			}

			@Override
			public void mouseMoved(MouseEvent e) {
						
				
			}
			
		});
	}
	public void setSize(int width, int height) {
		super.setSize(width, height);
		pane.setSize(width, height);
		pane.setLocation(0, 0);
	}
}
